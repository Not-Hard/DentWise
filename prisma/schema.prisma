// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//user model

model User {
  id        String    @id @default(cuid()) //internal user id
  clerkId   String    @unique //clerk user id
  email     String    @unique
  firstName String?
  lastName  String?
  phone     String?
  createdAt DateTime  @default(now()) //membership start date
  updatedAt DateTime  @updatedAt

  //relations
  appointments Appointment[]

  @@map("users") //map to users table
}

model Doctor {
  id          String    @id @default(cuid())
  name        String   
  email       String    @unique
  phone       String
  specialty   String
  bio         String?
  imageUrl    String
  gender      Gender
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  //relations
  appointments Appointment[]

  @@map("doctors") //map to doctors table
}

model Appointment {
  id         String    @id @default(cuid())
  date       DateTime
  time       String    // e.g., "14:30"
  duration   Int       @default(30) // duration in minutes
  status     AppointmentStatus @default(CONFIRMED)
  notes      String?
  reason     String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  //foreign keys
  userId     String
  doctorId   String

  //relations
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  doctor     Doctor    @relation(fields: [doctorId], references: [id], onDelete: Cascade)

  @@map("appointments") //map to appointments table
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum AppointmentStatus {
  CONFIRMED
  COMPLETED
}
